
/*
Script para recuperar datos de rendimiento y estado
*/

#!/bin/sh

INTERVAL=5
PREFIX=$INTERVAL-sec-status
RUNFILE=/home/benchmarks/running
mysql -e 'SHOW GLOBAL VARIABLES' >> mysql-variables
while test -e $RUNFILE; do
   file=$(date +%F_%I)
   sleep=$(date +%s.%N | awk "{print $INTERVAL - (\$1 % $INTERVAL)}")
   sleep $sleep
   ts="$(date +"TS %s.%N %F %T")"
   loadavg="$(uptime)"
   echo "$ts $loadavg" >> $PREFIX-${file}-status
   mysql -e 'SHOW GLOBAL STATUS' >> $PREFIX-${file}-status &
   echo "$ts $loadavg" >> $PREFIX-${file}-innodbstatus
   mysql -e 'SHOW ENGINE INNODB STATUS\G' >> $PREFIX-${file}-innodbstatus &
   echo "$ts $loadavg" >> $PREFIX-${file}-processlist
   mysql -e 'SHOW FULL PROCESSLIST\G' >> $PREFIX-${file}-processlist &
   echo $ts
done
echo Exiting because $RUNFILE does not exist.

# =======================================================
# =======================================================


#!/bin/sh
# El siguiente script convierte SHOW GLOBAL STATUS en un formato tabulado, una linea
# por muestra en la entrada, con las metricas divididas por el tiempo transcurrido
# entre muestras.
awk '
   BEGIN {
      printf "#ts date time load QPS";
      fmt = " %.2f";
   }
   /^TS/ { # The timestamp lines begin with TS.
      ts      = substr($2, 1, index($2, ".") - 1);
      load    = NF - 2;
      diff    = ts - prev_ts;
      prev_ts = ts;
      printf "\n%s %s %s %s", ts, $3, $4, substr($load, 1, length($load)-1);
   }
   /Queries/ {
      printf fmt, ($2-Queries)/diff;
      Queries=$2
   }
   ' "$@"

# Ejecuto el archivo (previo debe llamarse 'analyze')
 [chehin@chehin ~]$ ./analyze 5-sec-status-2011-03-20

# =======================================================
# =======================================================

# *** Funcion 'benchmark' de MySQL ***
# El siguiente script compara la velocidad de MD5() y SHA1()

SET @input := 'hello world';
SELECT BENCHMARK(1000000, MD5(@input));
SELECT BENCHMARK(1000000, SHA1(@input));


# =======================================================
# Configuracion de dbt2
# =======================================================

# 1. Preparar datos

# El  siguiente  comando  crea  datos  para  10  almacenes  en  el  directorio  especificado.
# Los  almacenes  utilizan  un  total  de  unos  700  MB  de  espacio.  La  cantidad  de  espacio  requerido  cambiar치 
# en  proporci칩n  a  la  cantidad  de  almacenes,  por  lo  que  puede  cambiar  el  par치metro  -w  para  crear  un 
# conjunto  de  datos  con  el  tama침o  que  necesita

src/datagen -w 10 -d /mnt/data/dbt2-w10

# 2.  Cargue  datos  en  la  base  de  datos  MySQ

# El  siguiente  comando  crea  una  base  de  datos  llamada  dbt2w10  y  la  carga  con  el
#datos  que  generamos  en  el  paso  anterior

scripts/mysql/mysql_load_db.sh -d dbt2w10 -f /mnt/data/dbt2-w10/
-s /var/lib/mysql/mysql.sock

# 3. Ejecute el benchmark

run_mysql.sh -c 10 -w 10 -t 300 -n dbt2w10/
-u root -o /var/lib/mysql/mysql.sock-e
